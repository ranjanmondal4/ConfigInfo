Junit 5 is a new framework for writing test cases. It is a newer version as against Junit 4 and Junit 3.
Java 8 comes with very new and notably features like Lambda expression. So for testing new features with ease Junit 5 comes.

JUnit 5 is equal to JUnit Platform + JUnit Jupiter + JUnit Vintage

JUnit Platform is a foundation for launching testing frameworks on the JVM. It defines the Test Engine APIs for developing a testing framework which will run on the platform. The platform provides a Console Launcher to launch the platform from the command line like "mvn test".
It also provides JUnit 4 based Runner for running any TestEngine on the platform in a JUnit 4 based environment. 


JUnit Jupiter provides new APIs for writing test in JUnit 5. It creates the tests that are run by Test Engine described above.
It includes new programming models and annotations for writing test.

JUnit Vintage gives a Test Engine for running JUnit 4 and JUnit 3.
Itâ€™s there is backward compatibility.


First, you have to add few dependencies in POM.xml in spring boot application and update the maven.

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<junit-jupiter.version>5.3.2</junit-jupiter.version>
		<mockito.version>2.24.0</mockito.version>
	</properties>

		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${junit-jupiter.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>${junit-jupiter.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>
			<version>3.0.0-M1</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<version>2.23.0</version>
			<scope>test</scope>
		</dependency>



For simplicity create a utility class MathUtils which contain some arithmetic operations.

package com.trader.utils;

public class MathUtils {

    public int add(int a, int b){
        return a + b;
    }

    public int divide(int a, int b){
        return a / b;
    }

    public int multiply(int a, int b){
        return a * b;
    }

    public int subtract(int a, int b){
        return a - b;
    }
}


Now select the class name using a cursor and click on Test under Navigate in IntelliJ.
It will create a new test class for MathUtils.java.
Just copy paste below code in the text file.

Select run command from Run tab in intellJ to run the test.

TestInstance(TestInstance.Lifecycle.PER_CLASS) denotes the only instance of the class created for all test methods written inside it.
DisplayName("") denotes readable user-friendly name to group test in class. It is very helpful and standard in many organizations.

BeforeAll The method annotated with this annotation will run before all test methods in the class. It is used for initializing members 
		of the class which is used by every test methods.

BeforeEach The method will execute before every test method.
            Here we have injected TestInfo and TestReporter. TestInfo instance has the information of Class name, Method name, and Tag name.
            TestReporter instance will report on the console with time stamp information. Together they will report required information that function is running currently.

Nested	   It is used to nest the similar test methods inside the nested class. Annotate the nested class with this annotation.

Test      Methods annotated with this will be executed with JUnit Platform. The test method can be passed or failed according to expected
		and the actual result.

Disabled   This annotation disabled the test method to get executed by JUnit. When you don't want your test to get executed you can 
	     use this on the top of the test method.

RepeatedTest(n) This annotation will repeat the test by n times.

assertEquals(expected_value, actual value from method, Message when test got failed);

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@DisplayName("Testing MathUtils")
class MathUtilsTest {

    MathUtils mathUtils;

    @BeforeAll
    void init(){
        mathUtils = new MathUtils();
    }

    @BeforeEach
    void beforeEach(TestInfo testInfo, TestReporter testReporter){
        testReporter.publishEntry("Currently running class name " + testInfo.getTestClass()
            + " method name " + testInfo.getTestMethod());
    }

    @Nested
    @DisplayName("add method")
    class AddTest {

        @Test
        @DisplayName("when adding two positive numbers")
        void addPositive() {
            assertEquals(2, mathUtils.add(1, 1), "should return right sum");
        }


        @Test
        @DisplayName("when adding positive and negative numbers")
        void addPositiveAndNegative() {
            assertEquals(0, mathUtils.add(1, -1), "should return right sum");
        }


        @Test
        @DisplayName("when adding two negative numbers")
        void addNegative() {
            assertEquals(-2, mathUtils.add(-1, -1), "should return right sum");
        }
    }


    @Test
    @DisplayName("Division of two numbers")
    //@Disabled
    void divide() {
       // boolean isServerUp = false;
       // System.out.println(System.getProperty("ENV"));
      //  Assumptions.assumeTrue(isServerUp);
        assertThrows(ArithmeticException.class,() -> mathUtils.divide(1, 0),
                "Arithmetic Exception found");
    }

    @Test
    @DisplayName("Multiplication of two numbers")
    void multiply() {
       assertAll(()-> assertEquals(4, mathUtils.multiply(2, 2)),
               ()-> assertEquals(0, mathUtils.multiply(2, 0)),
               ()-> assertEquals(-4, mathUtils.multiply(2, -2)),
               ()-> assertEquals(4, mathUtils.multiply(-2, -2)));
    }

    @RepeatedTest(3)
    @DisplayName("Subtraction of two numbers")
    void addNegative(RepetitionInfo repetitionInfo) {
       // System.out.println("repeation " + repetitionInfo.getCurrentRepetition());
        assertEquals(1, mathUtils.subtract(4, 3),
                () -> "should return subtraction value");
    }
}

