
Please Approve the following
Blog - "Database Testing or load testing via Apache JMeter"
WFH on 5 Dec and 20 Dec, 2019

Database Testing via Jmeter

Database Testing - GUI is most visible part of the application, so tester usually spend more time in testing it. Here database testing means to test following points in the application
i. All information should be saved correctly and should be seen to user correctly.
ii. No partial information should saved in the database.
iii. Unauthorized users should be able to access the system.
iv. Constraints should be not violated in the database while insertion and updates.

It involves validating the schema, tables, triggers and stored procedures etc and test the load / stress of various complex queries and stored procedures. It checks its responsives. It involves constraints and data consistencies.

First download mysql-connector-java-x.x.jar and place in apache-jmeter/lib folder and restart it.

Testing simple query via Jmeter.
Open Jmeter.
Select File -> New.
Set number of threads to 10
Set ramp-up period to 1 seconds and Loop count to 3.
Set the type of pool to select statement.
Set SQL query to any select query you want. 


Right click on Test Plan
	Select Add -> Sampler -> JDBC Request
Set variable name of pool in JDBC Connection configuration to pool.
Select transaction isoloation to DEFAULT

Set following configuration
Database URL -> jdbc:mysql://localhost:3306/{database-name}
eg. jdbc:mysql://localhost:3306/belrium
JDBC Driver class -> com.mysql.jdbc.Driver
Username -> root
Password -> root

Right click on Test Plan
	Select Add -> Listener -> View Results Tree
			       -> View Results in Table

Right click on Test Plan
	Select Add -> Config Element -> JDBC Connection Configuration
Set variable name for created pool to "pool"

Thread Group
i. continue or start next Thread loop 
	stop thread, stop test, stop test now

ii. Thread Properties
Number of threads (users) 10
Ramp up period - means when the creations of users takes places like 1 seconds
then 10 threads created in the interval 1/10 seconds.

Loop count - Number of requests
if 1, then number of requests are 1 * 10 = 10 requests.

Schedular is for scheduling tasks in time intervals.

Assertions
i. Response Assertion - text, response code etc
ii. Duration Assertion - 2000 ms
iii. Size Assertion - Bytes returned
iv. HTML Assertion - Valid html or not
   

Running it from command line
./jmeter -n -t <jmx file> -l <result file>

-n for non gui mode
-t location of jmeter script
-l location of result file

To run create html reports
./jmeter -n -t <jmx file> -l <result file>
	-e -o <location of output folder>

./jmeter -n -t <jmx file> -l <result file> -e -o <location of output folder>

-e to generate html report

./jmeter -g "location of csv file" -o "location of output folder"


functions
${__log("Sample test")}
${__time(dd MM YYYY HH mm ss)}
${__threadNum}

======== Real world junit test cases
think time - simulatet actual user actions with timings/delays
Pacing - controlled ramp-up and down of virtual users.
	- control timing between iterations
	- achieve x iterations in y mins/sec

https://octoperf.com/blog/2017/03/09/how-to-extract-data-from-json-response-using-jmeter/

Writing test cases using postman
https://medium.com/velotio-perspectives/api-testing-using-postman-and-newman-6c68c33303fc
