Mongoose Validations

case 1: Value of key is absent.
const schema = new mongoose.Schema({
    name: {type: String, required: true},
    author: String,
    tags: [String],
    date: {type: Date, default: Date.now},
    isPublished: Boolean
});

output:
{
    "errors": {
        "name": {
            "message": "Path `name` is required.",
            "name": "ValidatorError",
            "properties": {
                "message": "Path `{PATH}` is required.",
                "type": "required",
                "path": "name"
            },
            "kind": "required",
            "path": "name",
            "$isValidatorError": true
        }
    },
    "_message": "Course validation failed",
    "message": "Course validation failed: name: Path `name` is required.",
    "name": "ValidationError"
}

case 2: Dependency on another key

const schema = new mongoose.Schema({
    name: {type: String, required: true},
    author: String,
    tags: [String],
    date: {type: Date, default: Date.now},
    isPublished: Boolean,
    price: {type: Number, required: function(){
        return this.isPublished;
    }}
});


output:
{
    "errors": {
        "price": {
            "message": "Path `price` is required.",
            "name": "ValidatorError",
            "properties": {
                "message": "Path `{PATH}` is required.",
                "type": "required",
                "path": "price"
            },
            "kind": "required",
            "path": "price",
            "$isValidatorError": true
        },
        "name": {
            "message": "Path `name` is required.",
            "name": "ValidatorError",
            "properties": {
                "message": "Path `{PATH}` is required.",
                "type": "required",
                "path": "name"
            },
            "kind": "required",
            "path": "name",
            "$isValidatorError": true
        }
    },
    "_message": "Course validation failed",
    "message": "Course validation failed: price: Path `price` is required., name: Path `name` is required.",
    "name": "ValidationError"
}


case 3:  Enum for String value.
const schema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        minlength: 5,
        maxlength: 100,
        //match: /pattern/
    },
    category: {
        type: String,
        required: true,
        enum: ['Web', 'Mobile', 'Network']
    },
    author: String,
    tags: [String],
    date: {type: Date, default: Date.now},
    isPublished: Boolean,
    price: {type: Number, required: function(){
        return this.isPublished;
    }}
});

{
    "errors": {
        "category": {
            "message": "`java` is not a valid enum value for path `category`.",
            "name": "ValidatorError",
            "properties": {
                "message": "`{VALUE}` is not a valid enum value for path `{PATH}`.",
                "type": "enum",
                "enumValues": [
                    "Web",
                    "Mobile",
                    "Network"
                ],
                "path": "category",
                "value": "java"
            },
            "kind": "enum",
            "path": "category",
            "value": "java",
            "$isValidatorError": true
        }
    },
    "_message": "Course validation failed",
    "message": "Course validation failed: category: `java` is not a valid enum value for path `category`.",
    "name": "ValidationError"
}


case: Min and max validation on number and dates

output

{
    "errors": {
        "price": {
            "message": "Path `price` (9) is less than minimum allowed value (10).",
            "name": "ValidatorError",
            "properties": {
                "message": "Path `{PATH}` ({VALUE}) is less than minimum allowed value (10).",
                "type": "min",
                "min": 10,
                "path": "price",
                "value": 9
            },
            "kind": "min",
            "path": "price",
            "value": 9,
            "$isValidatorError": true
        }
    },
    "_message": "Course validation failed",
    "message": "Course validation failed: price: Path `price` (9) is less than minimum allowed value (10).",
    "name": "ValidationError"
}


case: Custom validator for Array contains atleast an element.
const schema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        minlength: 5,
        maxlength: 100,
        //match: /pattern/
    },
    category: {
        type: String,
        required: true,
        enum: ['Web', 'Mobile', 'Network']
    },
    author: String,
    tags: {
        type: Array,
        validate: {
            validator: function(v){
                return v && v.length > 0;
            },
            message: 'Atleast one tag should be present'
        }
    },
    date: {type: Date, default: Date.now},
    isPublished: Boolean,
    price: {
        type: Number,
        required: function(){
            return this.isPublished;
        },
        min: 10,
        max: 100
    }
});

or Custom validator for Array contains atleast an element and element should be string.

const schema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        minlength: 5,
        maxlength: 100,
        //match: /pattern/
    },
    category: {
        type: String,
        required: true,
        enum: ['Web', 'Mobile', 'Network']
    },
    author: String,
    tags: {
        type: Array,
        validate: {
            validator: function(v){
                return v && v.every(
                    (tag) => (typeof tag == 'string') &&
                    tag.length > 0);
            },
            message: 'Atleast one tag should be present'
        }
    },
    date: {type: Date, default: Date.now},
    isPublished: Boolean,
    price: {
        type: Number,
        required: function(){
            return this.isPublished;
        },
        min: 10,
        max: 100
    }
});

output:
{
    "errors": {
        "tags": {
            "message": "Atleast one tag should be present",
            "name": "ValidatorError",
            "properties": {
                "message": "Atleast one tag should be present",
                "type": "user defined",
                "path": "tags",
                "value": []
            },
            "kind": "user defined",
            "path": "tags",
            "value": [],
            "$isValidatorError": true
        }
    },
    "_message": "Course validation failed",
    "message": "Course validation failed: tags: Atleast one tag should be present",
    "name": "ValidationError"
}

Case: Adding async validations

const schema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        minlength: 5,
        maxlength: 100,
        //match: /pattern/
    },
    category: {
        type: String,
        required: true,
        enum: ['Web', 'Mobile', 'Network']
    },
    author: String,
    tags: {
        type: Array,
        validate: {
            isAsync: true,
            validator: function (v, callback) {
                setTimeout(() => {
                    // some usefull work
                    let isValid = v && v.every(
                        (tag) => (typeof tag == 'string') &&
                        tag.length > 0);
                    callback(isValid);
                }, 4000);
             },
             message: 'Atleast one tag should be present'
        }
    },
    date: {type: Date, default: Date.now},
    isPublished: Boolean,
    price: {
        type: Number,
        required: function(){
            return this.isPublished;
        },
        min: 10,
        max: 100
    }
});

output: 
{
    "errors": {
        "tags": {
            "message": "Atleast one tag should be present",
            "name": "ValidatorError",
            "properties": {
                "isAsync": true,
                "message": "Atleast one tag should be present",
                "type": "user defined",
                "path": "tags",
                "value": [
                    1
                ]
            },
            "kind": "user defined",
            "path": "tags",
            "value": [
                1
            ],
            "$isValidatorError": true
        }
    },
    "_message": "Course validation failed",
    "message": "Course validation failed: tags: Atleast one tag should be present",
    "name": "ValidationError"
}
