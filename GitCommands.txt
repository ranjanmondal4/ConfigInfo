

git config --global user.name "Your Name Here"
git config --global user.email "your_email@youremail.com"
git config --global core.autocrlf true
git config --global core.safecrlf true

git init	
/**
 run inside application folder,
 it will create .git folder inside application.
 Now you can start tracking version of your application.
 **/

 git clone https://github.com/libgit2/libgit2   // clones repo from github
 git clone https://github.com/libgit2/libgit2 mylib  // clones repo with folder name mylib

git status	// shows status means untracked, modified and deleted files and current branch
git status -s // s for short, display short descriptions
	output:
		M README    ---> Modified file not staged yet.
		MM Rakefile   ---> Modified and staged and then modified  
		A lib/git.rb   ----> Staged (added)
		?? LICENSE.txt  ---> Untracked File


/**
	For ignoring files to be added in Git. Create .gitignore file	  
**/
cat .gitignore  // add files and paths of files
git add .gitignore
git commit -m "Adding gitignore"


// to remove file from stag and working directory
git rm file_name
git commit -m "message-here"

// if file is modified, then staged. and you want to remove
git rm -f file_name  // f for force removal
git commit -m "message-here"

git mv file_from file_to  // renaming file in git.
// this is similar to following commands
mv file_from file_to
git rm file_from
git add file_to


git remote add origin https://github.com/username/myproject.git 	//  give url of online repo, origin is a nickname, u can give any name
git remote -v   // to conform above commands

git add Readme.txt        // add particular file to git attention, create snapshots
git add Readme.txt contributing.md // add two files or more
git add *.c               // all files ends with c
git add .                 // add all files
git commit -m “message here”  // commit by adding message (create checks points)


// create new branch and move to it.
1. git branch <branch_name>			// to create branch
   git checkout <branch_name>		// to navigate another branchname
		or
2. git checkout -b <branch_name>

3. git checkout -b <branch_name> master^   // create new branch with second last commit of master branch


/**
	Display Commits history 
**/
git log -2 // recents two commits.
git log -p -2 // recents two commits with modifications in those files
git log -2 --stat // recents two commands with files names and number of lines modified
git log -2 --pretty=oneline	// recents two commits in one lines

// more options in --pretty
git log -2 --pretty=short	
git log -2 --pretty=full
git log -2 --pretty=fuller

git log --pretty=format:"%H %ae"

Option 	Description of Output
%H 		Commit hash
%h 		Abbreviated commit hash
%T 		Tree hash
%t 		Abbreviated tree hash
%P 		Parent hashes
%p 		Abbreviated parent hashes
%an 	Author name
%ae 	Author email
%ad 	Author date (format respects the --date=option)
%ar 	Author date, relative
%cn 	Committer name
%ce 	Committer email
%cd 	Committer date
%cr 	Committer date, relative
%s 		Subject

git log --pretty=format:"%h %s" --graph // shows nice ASCII graph

Option 			Description
-p 				Show the patch introduced with each commit.
--stat 			Show statistics for files modified in each commit.
--shortstat 	Display only the changed/insertions/deletions line from the command.

--name-only 	Show the list of files modified after the commit information.
--name-status 	Show the list of files affected with added/modified/deleted
				information as well.

--abbrev-commit Show only the first few characters of the SHA-1 checksum instead of all 40.
				
--relative-date Display the date in a relative format (for example, “2 weeks ago”)
				 instead of using the full date format.

--graph 		Display an ASCII graph of the branch and merge history be-
				side the log output.
--pretty 		Show commits in an alternate format. Options include one-
				line, short, full, fuller, and format (where you specify your
				own format).

// limit log output
git log --since=2.weeks  // weeks, months, years, days
git log --until=2.weeks
git log --pretty=oneline --since='5 minutes ago'
git log --pretty=oneline --until='5 minutes ago'

git log --pretty=oneline --author=<author_name>
git log --author=<author_name> -2

Option 		Description
-(n) 		Show only the last n commits
--since
--after 	Limit the commits to those made after the specified date.
--until
--before 	Limit the commits to those made before the specified date.
--author 	Only show commits in which the author entry matches the specified string.
--committer Only show commits in which the committer entry matches the specified string.
--grep 		Only show commits with a commit message containing the string
-S 			Only show commits adding or removing code matching the string

git log --oneline --decorate --graph --all
// shows commits of remote branch which are not in local branch
git log --no-merges <local_branch>..origin/<remote_branch>



/**
	cherry pick - add commits from one branch to another.
**/
git checkout <branch_name> // move to branch where you add the commit
git cherry-pick d467740
git cherry-pick d467740 de906d4  // add more cherry picks in one go
// if cherry picks get halted, then resolve the conflicts, run your code
git cherry-pick --continue // then run continue command and add more cherry picks. --continue adds modified files
// for any resolved conflicts. 
git add <file_name>
git commit -m "message"
// after that successful cherry picks
git push origin <branch_name>

// abort cherry pick in middle of process
git cherry-pick --abort
// to cherry pick merge instead of commit
git cherry-pick -m 1 <hash>   // and push the changes

	// Modify the last message(Subject) 
git commit --amend       //  modify last commit message 

git add <forgotten_file>   // if you have committed, and forgot to add few files and want to make same commit.
git commit --amend
     or
git commit --amend -m "modify last commit message"


	// Listing branches
git branch  	// list all branches with current branch
git branch -v 	// list all branches with current branch and last commits
git branch -r	// list all remote branches
git remote show origin   // to see all remote and local branches and which are out of date

git branch --merged // list all branches which are merged to current branch
git branch --no-merged // list all branches which are not merged to current branch


	// Delete branch
git branch -d <branch_name>  // to delete allready merged branch
git branch -D <branch_name>  // to delete un-merged branch and lose their work.


	// Diff commands
git diff --check  // identifies possible whitespace errors
git diff          // to see difference between last commit and unstaged data (before add)
git diff --staged // to see difference between last commit and staged data (after add)
git diff file_name // show modified contents in specific file before staged.



	// Undo changes or modification before stage(add)
git checkout <file_name>   // particular file
git checkout .   		// for all changes in all files

	// Undo changes or modification after stage(add) means unstage(un-add)
git reset HEAD <file_name>   // particular file
git reset --soft HEAD~      // for all changes in all files

git reset --hard HEAD^   // undo last commit and all changes, HEAD^ -> second last commit
git reset --hard head^^  // undo last 2 commits
git reset --hard HEAD  	// apply in between merge and undo the merge
git reset --hard ORIG_HEAD // if merge commit created and to undo merge. Here ORIG_HEAD stores previous head
							// head stores merge commit.
git reset --hard origin/<current_branch_name>
git reset --hard HEAD@{2}

git reset option effects
----------------------------------------------------------
Option 		HEAD 	Index	Working directory
--soft 		Yes
--mixed 	Yes 	Yes
--hard 		Yes 	Yes		Yes

git reflog  // shows following output
f48bb36... HEAD@{0}: commit: Which commit parent?
7ecdc78... HEAD@{1}: dev: updating HEAD
e719b1f... HEAD@{2}: checkout: moving from dev to master
7ecdc78... HEAD@{3}: commit: Add dev_file to dev branch
e719b1f... HEAD@{4}: checkout: moving from master to dev


Mystifies ^ and ~
-------------------------------------------------------------
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A

A =      = A^0
B = A^   = A^1     = A~1
C = A^2  = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2


 	// revert particular commit.
 git pull origin <branch_name>
 git revert -m 1 <commit_id>
 git push origin <branch_name>


// following need to be reviewed

	if u discard changes in previous commit
git revert head --no-edit

	
git pull origin staging --allow-unrelated-histories

git pull origin branchname --allow-unrelated-histories


========================== tags
a tag is reference to commit used mostly for release versioning
	to list tags
git tags 
	to checkout code at commit
git checkout v0.0.1 
	to add new tag
git tag -a v0.0.3 -m "version 3"
	to push new tags
git push --tags



https://www.youtube.com/watch?v=byinJdoFVoA&list=PL4KQBOUw6E7sgf5KIEMUcTT_zWpNmYfbd&index=6
safest way to merge on branch to another in git   https://www.youtube.com/watch?v=yyLiplDQtf0

	to pull any changes but does not merge them
git fetch  =======>  create 2 timeline master and origin/master
git rebase ==============>do following changes
	move uncommited changes from master to temporary area
	then move all origin/master commit to master one at a timeline
	then commits from temporary area to master one at a timeline
	
	so
	git checkout admin
	git rebase master  =====> first run master commits and then run additional admin commits
	git checkout master
	git merge admin
if conflicts occur solve conflict
git rebase --continue
