

git config --global user.name "Your Name Here"
git config --global user.email "your_email@youremail.com"
git config --global core.autocrlf true
git config --global core.safecrlf true

git init	// runs inside application folder, only after this, it will receive further commands, u create directory structure for git

git status	// shows new, modified files and current branch
	if it does not intended branch, u can change ref: refs/heads/branchname in head file

git remote add origin https://github.com/username/myproject.git 	//  give url of online repo, origin is a nickname, u can give any name
git remote -v   // to conform above commands

git add Readme.txt        // add particular file to git attention, create snapshots
git commit -m “Add Readme.txt”  // commit by adding message (create checks points)

git add .	// add all files
git commit -m "message"

git push origin branchname	// push to specific branch

	if following error come
	! [rejected]          staging -> staging (non-fast-forward)
	error: failed to push some refs to 'https://github.com/ranjanmondal4/angulardemo.git'
git pull origin staging

	if following error come
	fatal: refusing to merge unrelated histories
git pull origin staging --allow-unrelated-histories

git pull origin branchname --allow-unrelated-histories

CONFLICT (add/add): Merge conflict in README.md
Automatic merge failed; fix conflicts and then commit the result.

	after fixing issue
	add and commit files and push it

press esc and then shift + zz to exit merge tool

git branch branchname	// to create branch
git checkout branchname		// to navigate another branchname

git checkout -- <file>		// to undo changes

git log --pretty=oneline	// produces logs in one line
git log --pretty=oneline --max-count=2
git log --pretty=oneline --since='5 minutes ago'
git log --pretty=oneline --until='5 minutes ago'
git log --pretty=oneline --author=<your name>
git log --pretty=oneline --all
$ git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
* fa3c141 2011-03-09 | Added HTML header (HEAD, master) [Alexander Shvets]
* 8c32287 2011-03-09 | Added standard HTML page tags [Alexander Shvets]
* 43628f7 2011-03-09 | Added h1 tag [Alexander Shvets]

Let’s look at it in detail:
--pretty="..." defines the output format.
%h is the abbreviated hash of the commit
%d commit decorations (e.g. branch heads or tags)
%ad is the commit date
%s is the comment
%an is the name of the author
--graph tells git to display the commit tree in the form of an ASCII graph layout
--date=short keeps the date format short and nice

git checkout <hash>		// get latest updates from repo
* 911e8c9 2011-03-09 | First Commit [Alexander Shvets]

	if u wanted undo changes
git status
git checkout filename

	if u add particular file and unstage it
git add file.html
git reset head file.html

	if u discard changes in previous commit
git revert head --no-edit

	if u commit before, then again u want to commit with ur changes
git add file.html
git commit --amend -m "commit again"

	if u want certain files not committed to repo and never shows up on git status
	open file .gitignore, and type path of file.

	if u have empty directory and u want fresh copy of project on github
git clone https://github.com/ranjanmondal4/angulardemo.git

	to create new branch
git checkout -b branchname
	switch to another branch
git checkout existingBranchName


git log

	to see difference between last commit and unstaged data (before add)
git diff
	to see difference between last commit and staged data (after add)
git diff --staged
	if u want to discard changes
git checkout --filename
	to undoing commit
git reset --soft HEAD^

	adding to last commit
git add filename
git commit --amend   or git commit --amend -m "modify last commit message"

	if u horribly wrong, want to undo last commit and all changes
git reset --hard HEAD^
	want to undo last 2 commits
git reset --hard head^^

	to remove remote
git remote rm origin
	to clone a repo if u are fresh to start
git clone http://url.git
	to create new branch
git branch staging

	to know which branch or timeline we are in
git branch
	to move to another branch
git checkout branchname
	to merge staging to master
git checkout master
git merge staging
	to delete branch
git branch -d staging


----------------------------:w for write  and :q for quit

	when there is conflict
	
	<<<<<<<<<<< head 
		this is urs code
	===================
		others code
	>>>>>>>>>>>>>>>>>
	
	correct this
git commit -a
	
	to see all remote branch
git branch -r
	to see all remote and local branches and which r out of date
git remote show origin

	to remove remote branch
git push origin :staging
	to remove local branch if u don't have any changes to commit
git branch -d staging
	but if u have and still u want to delete it
git branch -D staging
	if u want to push commit to unexisted branch and want to delete stale references
git remote prune origin

========================== tags
a tag is reference to commit used mostly for release versioning
	to list tags
git tags 
	to checkout code at commit
git checkout v0.0.1 
	to add new tag
git tag -a v0.0.3 -m "version 3"
	to push new tags
git push --tags



https://www.youtube.com/watch?v=byinJdoFVoA&list=PL4KQBOUw6E7sgf5KIEMUcTT_zWpNmYfbd&index=6

	to pull any changes but does not merge them
git fetch  =======>  create 2 timeline master and origin/master
git rebase ==============>do following changes
	move uncommited changes from master to temporary area
	then move all origin/master commit to master one at a timeline
	then commits from temporary area to master one at a timeline
	
	so
	git checkout admin
	git rebase master  =====> first run master commits and then run additional admin commits
	git checkout master
	git merge admin
if conflicts occur solve conflict
git rebase --continue

