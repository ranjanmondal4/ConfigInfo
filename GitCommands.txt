

git config --global user.name "Your Name Here"
git config --global user.email "your_email@youremail.com"
git config --global core.autocrlf true
git config --global core.safecrlf true

git init	
/**
 run inside application folder,
 it will create .git folder inside application.
 Now you can start tracking version of your application.
 **/

 git clone https://github.com/libgit2/libgit2   // clones repo from github
 git clone https://github.com/libgit2/libgit2 mylib  // clones repo with folder name mylib

git status	// shows status means untracked, modified and deleted files and current branch
git status -s // s for short, display short descriptions
	output:
		M README    ---> Modified file not staged yet.
		MM Rakefile   ---> Modified and staged and then modified  
		A lib/git.rb   ----> Staged (added)
		?? LICENSE.txt  ---> Untracked File


/**
	For ignoring files to be added in Git. Create .gitignore file
	  **/
cat .gitignore  // add files and paths of files
git add .gitignore
git commit -m "Adding gitignore"

git diff // show modified contents in the files before staged.
git diff file_name // show modified contents in specific file before staged.
git diff --staged  // show contents which are staged but not committed yet.

// to remove file from stag and working directory
git rm file_name
git commit -m "message-here"

// if file is modified, then staged. and you want to remove
git rm -f file_name  // f for force removal
git commit -m "message-here"

git mv file_from file_to  // renaming file in git.
// this is similar to following commands
mv file_from file_to
git rm file_from
git add file_to


git remote add origin https://github.com/username/myproject.git 	//  give url of online repo, origin is a nickname, u can give any name
git remote -v   // to conform above commands

git add Readme.txt        // add particular file to git attention, create snapshots
git add Readme.txt contributing.md // add two files or more
git add *.c               // all files ends with c
git add .                 // add all files
git commit -m “message here”  // commit by adding message (create checks points)


git push origin branchname	// push to specific branch

	if following error come
	! [rejected]          staging -> staging (non-fast-forward)
	error: failed to push some refs to 'https://github.com/ranjanmondal4/angulardemo.git'
git pull origin staging

	if following error come
	fatal: refusing to merge unrelated histories
git pull origin staging --allow-unrelated-histories

git pull origin branchname --allow-unrelated-histories

CONFLICT (add/add): Merge conflict in README.md
Automatic merge failed; fix conflicts and then commit the result.

	after fixing issue
	add and commit files and push it

press esc and then shift + zz to exit merge tool

git branch branchname	// to create branch
git checkout branchname		// to navigate another branchname

git checkout -- <file>		// to undo changes

/**
	to commits history 
**/
git log -2 // recents two commits.
git log -p -2 // recents two commits with modifications in those files
git log -2 --stat // recents two commands with files names and number of lines modified
git log -2 --pretty=oneline	// recents two commits in one lines
// more options in --pretty
git log -2 --pretty=short	
git log -2 --pretty=full
git log -2 --pretty=fuller

git log --pretty=format:"%H %ae"

Option 	Description of Output
%H 		Commit hash
%h 		Abbreviated commit hash
%T 		Tree hash
%t 		Abbreviated tree hash
%P 		Parent hashes
%p 		Abbreviated parent hashes
%an 	Author name
%ae 	Author email
%ad 	Author date (format respects the --date=option)
%ar 	Author date, relative
%cn 	Committer name
%ce 	Committer email
%cd 	Committer date
%cr 	Committer date, relative
%s 		Subject

git log --pretty=format:"%h %s" --graph // shows nice ASCII graph

Option 			Description
-p 				Show the patch introduced with each commit.
--stat 			Show statistics for files modified in each commit.
--shortstat 	Display only the changed/insertions/deletions line from the command.

--name-only 	Show the list of files modified after the commit information.
--name-status 	Show the list of files affected with added/modified/deleted
				information as well.

--abbrev-commit Show only the first few characters of the SHA-1 checksum instead of all 40.
				
--relative-date Display the date in a relative format (for example, “2 weeks ago”)
				 instead of using the full date format.

--graph 		Display an ASCII graph of the branch and merge history be-
				side the log output.
--pretty 		Show commits in an alternate format. Options include one-
				line, short, full, fuller, and format (where you specify your
				own format).

// limit log output
git log --since=2.weeks  // weeks, months, years, days
git log --until=2.weeks
git log --pretty=oneline --since='5 minutes ago'
git log --pretty=oneline --until='5 minutes ago'

git log --pretty=oneline --author=<author_name>
git log --author=<author_name> -2

Option 		Description
-(n) 		Show only the last n commits
--since
--after 	Limit the commits to those made after the specified date.
--until
--before 	Limit the commits to those made before the specified date.
--author 	Only show commits in which the author entry matches the specified string.
--committer Only show commits in which the committer entry matches the specified string.
--grep 		Only show commits with a commit message containing the string
-S 			Only show commits adding or removing code matching the string

git log --oneline --decorate --graph --all
// shows commits of remote branch which are not in local branch
git log --no-merges <local_branch>..origin/<remote_branch>

/**
cherry pick - add commits from one branch to another.
**/
git checkout <branch_name> // move to branch where you add the commit
git cherry-pick d467740
git cherry-pick d467740 de906d4  // add more cherry picks in one go
// if cherry picks get halted, then resolve the conflicts, run your code
git cherry-pick --continue // then run continue command and add more cherry picks
// for any resolved conflicts. 
git add <file_name>
git commit -m "message"
// after that successful cherry picks
git push origin <branch_name>

// abort cherry pick in middle of process
git cherry-pick --abort
// to cherry pick merge instead of commit
git cherry-pick -m 1 <hash>   // and push the changes

// Correct the last message(Subject) 
git commit --amend
// if you have committed, and forgot to add few files and want to make same commit.
git add forgotten_file
git commit --amend


git branch  // list all branches with current branch
git branch -v // list all branches with current branch and last commits

git branch --merged // list all branches which are merged to current branch
git branch --no-merged // list all branches which are not merged to current branch

git branch -d <branch_name>  // to delete allready merged branch
git branch -D <branch_name>  // to delete un-merged branch and lose their work.

git diff --check  // identifies possible whitespace errors

git checkout <hash>		// get latest updates from repo
* 911e8c9 2011-03-09 | First Commit [Alexander Shvets]

//	if you wanted undo changes or modification before stage(add)
git checkout filename
git checkout .   // for all changes in all files

// if you add particular file and want to unstage(un-add) it.
git reset HEAD file.html

	if u discard changes in previous commit
git revert head --no-edit

	if u commit before, then again u want to commit with ur changes
git add file.html
git commit --amend -m "commit again"

	if u want certain files not committed to repo and never shows up on git status
	open file .gitignore, and type path of file.

	if u have empty directory and u want fresh copy of project on github
git clone https://github.com/ranjanmondal4/angulardemo.git

	to create new branch
git checkout -b branchname
	switch to another branch
git checkout existingBranchName


	to see difference between last commit and unstaged data (before add)
git diff
	to see difference between last commit and staged data (after add)
git diff --staged
	if u want to discard changes
git checkout --filename
	to undoing commit
git reset --soft HEAD^

	adding to last commit
git add filename
git commit --amend   or git commit --amend -m "modify last commit message"

	if u horribly wrong, want to undo last commit and all changes
git reset --hard HEAD^
	want to undo last 2 commits
git reset --hard head^^

	to remove remote
git remote rm origin
	to clone a repo if u are fresh to start
git clone http://url.git
	to create new branch
git branch staging

	to know which branch or timeline we are in
git branch
	to move to another branch
git checkout branchname
	to merge staging to master
git checkout master
git merge staging
	to delete branch
git branch -d staging


----------------------------:w for write  and :q for quit

	when there is conflict
	
	<<<<<<<<<<< head 
		this is urs code
	===================
		others code
	>>>>>>>>>>>>>>>>>
	
	correct this
git commit -a
	
	to see all remote branch
git branch -r
	to see all remote and local branches and which r out of date
git remote show origin

	to remove remote branch
git push origin :staging
	to remove local branch if u don't have any changes to commit
git branch -d staging
	but if u have and still u want to delete it
git branch -D staging
	if u want to push commit to unexisted branch and want to delete stale references
git remote prune origin

========================== tags
a tag is reference to commit used mostly for release versioning
	to list tags
git tags 
	to checkout code at commit
git checkout v0.0.1 
	to add new tag
git tag -a v0.0.3 -m "version 3"
	to push new tags
git push --tags



https://www.youtube.com/watch?v=byinJdoFVoA&list=PL4KQBOUw6E7sgf5KIEMUcTT_zWpNmYfbd&index=6
safest way to merge on branch to another in git   https://www.youtube.com/watch?v=yyLiplDQtf0

	to pull any changes but does not merge them
git fetch  =======>  create 2 timeline master and origin/master
git rebase ==============>do following changes
	move uncommited changes from master to temporary area
	then move all origin/master commit to master one at a timeline
	then commits from temporary area to master one at a timeline
	
	so
	git checkout admin
	git rebase master  =====> first run master commits and then run additional admin commits
	git checkout master
	git merge admin
if conflicts occur solve conflict
git rebase --continue


 
 1. first to branch where you want to revert.
 git pull origin branchName

 git revert -m 1 commitID

 git push origin branchName


 //After adding and committing but not push. You want to unadd.
 1. git reset HEAD <file_name> 
		or
 2. git reset --soft HEAD~

 // Reset Modified file (not staged yet)
 1. git checkout <file_name>
		or
 2. git checkout .  // all modified files


git reset --head origin/current_branch_name

// 
